'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="cvb815a_assign2")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAddress(instance As Address)
    End Sub
  Partial Private Sub UpdateAddress(instance As Address)
    End Sub
  Partial Private Sub DeleteAddress(instance As Address)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertOrder_Line(instance As Order_Line)
    End Sub
  Partial Private Sub UpdateOrder_Line(instance As Order_Line)
    End Sub
  Partial Private Sub DeleteOrder_Line(instance As Order_Line)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertExpandedOrders(instance As ExpandedOrders)
    End Sub
  Partial Private Sub UpdateExpandedOrders(instance As ExpandedOrders)
    End Sub
  Partial Private Sub DeleteExpandedOrders(instance As ExpandedOrders)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(Global.DBAccessLib.My.MySettings.Default.ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Addresses() As System.Data.Linq.Table(Of Address)
		Get
			Return Me.GetTable(Of Address)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Order_Lines() As System.Data.Linq.Table(Of Order_Line)
		Get
			Return Me.GetTable(Of Order_Line)
		End Get
	End Property
	
	Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetail)
		Get
			Return Me.GetTable(Of OrderDetail)
		End Get
	End Property
	
	Public ReadOnly Property ProductsWithPendings() As System.Data.Linq.Table(Of ProductsWithPending)
		Get
			Return Me.GetTable(Of ProductsWithPending)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property ExpandedOrders() As System.Data.Linq.Table(Of ExpandedOrders)
		Get
			Return Me.GetTable(Of ExpandedOrders)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Address")>  _
Partial Public Class Address
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _street As String
	
	Private _city As String
	
	Private _province As String
	
	Private _postal_code As String
	
	Private _type As Boolean
	
	Private _customer_id As System.Nullable(Of Integer)
	
	Private _Orders As EntitySet(Of [Order])
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnstreetChanging(value As String)
    End Sub
    Partial Private Sub OnstreetChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub Onpostal_codeChanging(value As String)
    End Sub
    Partial Private Sub Onpostal_codeChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Boolean)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub Oncustomer_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncustomer_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property street() As String
		Get
			Return Me._street
		End Get
		Set
			If (String.Equals(Me._street, value) = false) Then
				Me.OnstreetChanging(value)
				Me.SendPropertyChanging
				Me._street = value
				Me.SendPropertyChanged("street")
				Me.OnstreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postal_code", DbType:="Char(6) NOT NULL", CanBeNull:=false)>  _
	Public Property postal_code() As String
		Get
			Return Me._postal_code
		End Get
		Set
			If (String.Equals(Me._postal_code, value) = false) Then
				Me.Onpostal_codeChanging(value)
				Me.SendPropertyChanging
				Me._postal_code = value
				Me.SendPropertyChanged("postal_code")
				Me.Onpostal_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="Bit NOT NULL")>  _
	Public Property type() As Boolean
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_id", DbType:="Int")>  _
	Public Property customer_id() As System.Nullable(Of Integer)
		Get
			Return Me._customer_id
		End Get
		Set
			If (Me._customer_id.Equals(value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncustomer_idChanging(value)
				Me.SendPropertyChanging
				Me._customer_id = value
				Me.SendPropertyChanged("customer_id")
				Me.Oncustomer_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Order", Storage:="_Orders", ThisKey:="id", OtherKey:="shipping_address_id")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Address", Storage:="_Customer", ThisKey:="customer_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Addresses.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Addresses.Add(Me)
					Me._customer_id = value.id
				Else
					Me._customer_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Address = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Address = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _description As String
	
	Private _price As Decimal
	
	Private _inventory As Integer
	
	Private _active As Boolean
	
	Private _Order_Lines As EntitySet(Of Order_Line)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    Partial Private Sub OninventoryChanging(value As Integer)
    End Sub
    Partial Private Sub OninventoryChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Order_Lines = New EntitySet(Of Order_Line)(AddressOf Me.attach_Order_Lines, AddressOf Me.detach_Order_Lines)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property price() As Decimal
		Get
			Return Me._price
		End Get
		Set
			If ((Me._price = value)  _
						= false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventory", DbType:="Int NOT NULL")>  _
	Public Property inventory() As Integer
		Get
			Return Me._inventory
		End Get
		Set
			If ((Me._inventory = value)  _
						= false) Then
				Me.OninventoryChanging(value)
				Me.SendPropertyChanging
				Me._inventory = value
				Me.SendPropertyChanged("inventory")
				Me.OninventoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Order_Line", Storage:="_Order_Lines", ThisKey:="id", OtherKey:="product_id")>  _
	Public Property Order_Lines() As EntitySet(Of Order_Line)
		Get
			Return Me._Order_Lines
		End Get
		Set
			Me._Order_Lines.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Order_Lines(ByVal entity As Order_Line)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_Order_Lines(ByVal entity As Order_Line)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _email As String
	
	Private _phone As String
	
	Private _credit_limit As Decimal
	
	Private _Addresses As EntitySet(Of Address)
	
	Private _Orders As EntitySet(Of [Order])
	
	Private _ExpandedOrders As EntityRef(Of ExpandedOrders)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub Oncredit_limitChanging(value As Decimal)
    End Sub
    Partial Private Sub Oncredit_limitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Addresses = New EntitySet(Of Address)(AddressOf Me.attach_Addresses, AddressOf Me.detach_Addresses)
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		Me._ExpandedOrders = CType(Nothing, EntityRef(Of ExpandedOrders))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ExpandedOrders.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credit_limit", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property credit_limit() As Decimal
		Get
			Return Me._credit_limit
		End Get
		Set
			If ((Me._credit_limit = value)  _
						= false) Then
				Me.Oncredit_limitChanging(value)
				Me.SendPropertyChanging
				Me._credit_limit = value
				Me.SendPropertyChanged("credit_limit")
				Me.Oncredit_limitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Address", Storage:="_Addresses", ThisKey:="id", OtherKey:="customer_id")>  _
	Public Property Addresses() As EntitySet(Of Address)
		Get
			Return Me._Addresses
		End Get
		Set
			Me._Addresses.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Orders", ThisKey:="id", OtherKey:="customer_id")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpandedOrders_Customer", Storage:="_ExpandedOrders", ThisKey:="id", OtherKey:="customer_id", IsForeignKey:=true)>  _
	Public Property ExpandedOrders() As ExpandedOrders
		Get
			Return Me._ExpandedOrders.Entity
		End Get
		Set
			Dim previousValue As ExpandedOrders = Me._ExpandedOrders.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpandedOrders.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpandedOrders.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._ExpandedOrders.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._id = value.customer_id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExpandedOrders")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Addresses(ByVal entity As Address)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Addresses(ByVal entity As Address)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Order_Line")>  _
Partial Public Class Order_Line
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _order_id As Integer
	
	Private _product_id As Integer
	
	Private _quantity As Integer
	
	Private _ship_date As System.Nullable(Of Date)
	
	Private _Product As EntityRef(Of Product)
	
	Private _Order As EntityRef(Of [Order])
	
	Private _ExpandedOrders As EntityRef(Of ExpandedOrders)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onorder_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onorder_idChanged()
    End Sub
    Partial Private Sub Onproduct_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onproduct_idChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub Onship_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onship_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Product = CType(Nothing, EntityRef(Of Product))
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		Me._ExpandedOrders = CType(Nothing, EntityRef(Of ExpandedOrders))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_id", DbType:="Int NOT NULL")>  _
	Public Property order_id() As Integer
		Get
			Return Me._order_id
		End Get
		Set
			If ((Me._order_id = value)  _
						= false) Then
				If (Me._Order.HasLoadedOrAssignedValue OrElse Me._ExpandedOrders.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onorder_idChanging(value)
				Me.SendPropertyChanging
				Me._order_id = value
				Me.SendPropertyChanged("order_id")
				Me.Onorder_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_id", DbType:="Int NOT NULL")>  _
	Public Property product_id() As Integer
		Get
			Return Me._product_id
		End Get
		Set
			If ((Me._product_id = value)  _
						= false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onproduct_idChanging(value)
				Me.SendPropertyChanging
				Me._product_id = value
				Me.SendPropertyChanged("product_id")
				Me.Onproduct_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int NOT NULL")>  _
	Public Property quantity() As Integer
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ship_date", DbType:="Date")>  _
	Public Property ship_date() As System.Nullable(Of Date)
		Get
			Return Me._ship_date
		End Get
		Set
			If (Me._ship_date.Equals(value) = false) Then
				Me.Onship_dateChanging(value)
				Me.SendPropertyChanging
				Me._ship_date = value
				Me.SendPropertyChanged("ship_date")
				Me.Onship_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Order_Line", Storage:="_Product", ThisKey:="product_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.Order_Lines.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Order_Lines.Add(Me)
					Me._product_id = value.id
				Else
					Me._product_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_Order_Line", Storage:="_Order", ThisKey:="order_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.Order_Lines.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Order_Lines.Add(Me)
					Me._order_id = value.id
				Else
					Me._order_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpandedOrders_Order_Line", Storage:="_ExpandedOrders", ThisKey:="order_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property ExpandedOrders() As ExpandedOrders
		Get
			Return Me._ExpandedOrders.Entity
		End Get
		Set
			Dim previousValue As ExpandedOrders = Me._ExpandedOrders.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpandedOrders.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpandedOrders.Entity = Nothing
					previousValue.Order_Lines.Remove(Me)
				End If
				Me._ExpandedOrders.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Order_Lines.Add(Me)
					Me._order_id = value.id
				Else
					Me._order_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExpandedOrders")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderDetails")>  _
Partial Public Class OrderDetail
	
	Private _customer_id As Integer
	
	Private _customer_name As String
	
	Private _customer_email As String
	
	Private _credit_limit As Decimal
	
	Private _order_id As Integer
	
	Private _order_date As Date
	
	Private _discount As Decimal
	
	Private _product_id As Integer
	
	Private _description As String
	
	Private _price As Decimal
	
	Private _in_stock As Integer
	
	Private _order_quantity As Integer
	
	Private _item_ship_date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_id", DbType:="Int NOT NULL")>  _
	Public Property customer_id() As Integer
		Get
			Return Me._customer_id
		End Get
		Set
			If ((Me._customer_id = value)  _
						= false) Then
				Me._customer_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property customer_name() As String
		Get
			Return Me._customer_name
		End Get
		Set
			If (String.Equals(Me._customer_name, value) = false) Then
				Me._customer_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property customer_email() As String
		Get
			Return Me._customer_email
		End Get
		Set
			If (String.Equals(Me._customer_email, value) = false) Then
				Me._customer_email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credit_limit", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property credit_limit() As Decimal
		Get
			Return Me._credit_limit
		End Get
		Set
			If ((Me._credit_limit = value)  _
						= false) Then
				Me._credit_limit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_id", DbType:="Int NOT NULL")>  _
	Public Property order_id() As Integer
		Get
			Return Me._order_id
		End Get
		Set
			If ((Me._order_id = value)  _
						= false) Then
				Me._order_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_date", DbType:="Date NOT NULL")>  _
	Public Property order_date() As Date
		Get
			Return Me._order_date
		End Get
		Set
			If ((Me._order_date = value)  _
						= false) Then
				Me._order_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(3,0) NOT NULL")>  _
	Public Property discount() As Decimal
		Get
			Return Me._discount
		End Get
		Set
			If ((Me._discount = value)  _
						= false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_id", DbType:="Int NOT NULL")>  _
	Public Property product_id() As Integer
		Get
			Return Me._product_id
		End Get
		Set
			If ((Me._product_id = value)  _
						= false) Then
				Me._product_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property price() As Decimal
		Get
			Return Me._price
		End Get
		Set
			If ((Me._price = value)  _
						= false) Then
				Me._price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_in_stock", DbType:="Int NOT NULL")>  _
	Public Property in_stock() As Integer
		Get
			Return Me._in_stock
		End Get
		Set
			If ((Me._in_stock = value)  _
						= false) Then
				Me._in_stock = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_quantity", DbType:="Int NOT NULL")>  _
	Public Property order_quantity() As Integer
		Get
			Return Me._order_quantity
		End Get
		Set
			If ((Me._order_quantity = value)  _
						= false) Then
				Me._order_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_ship_date", DbType:="Date")>  _
	Public Property item_ship_date() As System.Nullable(Of Date)
		Get
			Return Me._item_ship_date
		End Get
		Set
			If (Me._item_ship_date.Equals(value) = false) Then
				Me._item_ship_date = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductsWithPending")>  _
Partial Public Class ProductsWithPending
	
	Private _id As Integer
	
	Private _description As String
	
	Private _inventory As Integer
	
	Private _active As Boolean
	
	Private _price As Decimal
	
	Private _Expr1 As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventory", DbType:="Int NOT NULL")>  _
	Public Property inventory() As Integer
		Get
			Return Me._inventory
		End Get
		Set
			If ((Me._inventory = value)  _
						= false) Then
				Me._inventory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property price() As Decimal
		Get
			Return Me._price
		End Get
		Set
			If ((Me._price = value)  _
						= false) Then
				Me._price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expr1", DbType:="Int NOT NULL")>  _
	Public Property Expr1() As Integer
		Get
			Return Me._Expr1
		End Get
		Set
			If ((Me._Expr1 = value)  _
						= false) Then
				Me._Expr1 = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _order_date As Date
	
	Private _discount As Decimal
	
	Private _customer_id As Integer
	
	Private _shipping_address_id As Integer
	
	Private _Order_Lines As EntitySet(Of Order_Line)
	
	Private _Address As EntityRef(Of Address)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _ExpandedOrders As EntityRef(Of ExpandedOrders)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onorder_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onorder_dateChanged()
    End Sub
    Partial Private Sub OndiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OndiscountChanged()
    End Sub
    Partial Private Sub Oncustomer_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncustomer_idChanged()
    End Sub
    Partial Private Sub Onshipping_address_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onshipping_address_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Order_Lines = New EntitySet(Of Order_Line)(AddressOf Me.attach_Order_Lines, AddressOf Me.detach_Order_Lines)
		Me._Address = CType(Nothing, EntityRef(Of Address))
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._ExpandedOrders = CType(Nothing, EntityRef(Of ExpandedOrders))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ExpandedOrders.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_date", DbType:="Date NOT NULL")>  _
	Public Property order_date() As Date
		Get
			Return Me._order_date
		End Get
		Set
			If ((Me._order_date = value)  _
						= false) Then
				Me.Onorder_dateChanging(value)
				Me.SendPropertyChanging
				Me._order_date = value
				Me.SendPropertyChanged("order_date")
				Me.Onorder_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(3,0) NOT NULL")>  _
	Public Property discount() As Decimal
		Get
			Return Me._discount
		End Get
		Set
			If ((Me._discount = value)  _
						= false) Then
				Me.OndiscountChanging(value)
				Me.SendPropertyChanging
				Me._discount = value
				Me.SendPropertyChanged("discount")
				Me.OndiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_id", DbType:="Int NOT NULL")>  _
	Public Property customer_id() As Integer
		Get
			Return Me._customer_id
		End Get
		Set
			If ((Me._customer_id = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncustomer_idChanging(value)
				Me.SendPropertyChanging
				Me._customer_id = value
				Me.SendPropertyChanged("customer_id")
				Me.Oncustomer_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shipping_address_id", DbType:="Int NOT NULL")>  _
	Public Property shipping_address_id() As Integer
		Get
			Return Me._shipping_address_id
		End Get
		Set
			If ((Me._shipping_address_id = value)  _
						= false) Then
				If Me._Address.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onshipping_address_idChanging(value)
				Me.SendPropertyChanging
				Me._shipping_address_id = value
				Me.SendPropertyChanged("shipping_address_id")
				Me.Onshipping_address_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_Order_Line", Storage:="_Order_Lines", ThisKey:="id", OtherKey:="order_id")>  _
	Public Property Order_Lines() As EntitySet(Of Order_Line)
		Get
			Return Me._Order_Lines
		End Get
		Set
			Me._Order_Lines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Order", Storage:="_Address", ThisKey:="shipping_address_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Address() As Address
		Get
			Return Me._Address.Entity
		End Get
		Set
			Dim previousValue As Address = Me._Address.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Address.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Address.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._shipping_address_id = value.id
				Else
					Me._shipping_address_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Address")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Customer", ThisKey:="customer_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._customer_id = value.id
				Else
					Me._customer_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpandedOrders_Order", Storage:="_ExpandedOrders", ThisKey:="id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property ExpandedOrders() As ExpandedOrders
		Get
			Return Me._ExpandedOrders.Entity
		End Get
		Set
			Dim previousValue As ExpandedOrders = Me._ExpandedOrders.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpandedOrders.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpandedOrders.Entity = Nothing
					previousValue.Orders = Nothing
				End If
				Me._ExpandedOrders.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExpandedOrders")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Order_Lines(ByVal entity As Order_Line)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_Order_Lines(ByVal entity As Order_Line)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderExpanded")>  _
Partial Public Class ExpandedOrders
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _customer_id As Integer
	
	Private _name As String
	
	Private _email As String
	
	Private _phone As String
	
	Private _credit_limit As Decimal
	
	Private _order_date As Date
	
	Private _subtotal As System.Nullable(Of Decimal)
	
	Private _discount As Decimal
	
	Private _total As System.Nullable(Of Decimal)
	
	Private _Customers As EntitySet(Of Customer)
	
	Private _Order_Lines As EntitySet(Of Order_Line)
	
	Private _Orders As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncustomer_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncustomer_idChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub Oncredit_limitChanging(value As Decimal)
    End Sub
    Partial Private Sub Oncredit_limitChanged()
    End Sub
    Partial Private Sub Onorder_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onorder_dateChanged()
    End Sub
    Partial Private Sub OnsubtotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnsubtotalChanged()
    End Sub
    Partial Private Sub OndiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OndiscountChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		Me._Order_Lines = New EntitySet(Of Order_Line)(AddressOf Me.attach_Order_Lines, AddressOf Me.detach_Order_Lines)
		Me._Orders = CType(Nothing, EntityRef(Of [Order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_id", DbType:="Int NOT NULL")>  _
	Public Property customer_id() As Integer
		Get
			Return Me._customer_id
		End Get
		Set
			If ((Me._customer_id = value)  _
						= false) Then
				Me.Oncustomer_idChanging(value)
				Me.SendPropertyChanging
				Me._customer_id = value
				Me.SendPropertyChanged("customer_id")
				Me.Oncustomer_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credit_limit", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property credit_limit() As Decimal
		Get
			Return Me._credit_limit
		End Get
		Set
			If ((Me._credit_limit = value)  _
						= false) Then
				Me.Oncredit_limitChanging(value)
				Me.SendPropertyChanging
				Me._credit_limit = value
				Me.SendPropertyChanged("credit_limit")
				Me.Oncredit_limitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_date", DbType:="Date NOT NULL")>  _
	Public Property order_date() As Date
		Get
			Return Me._order_date
		End Get
		Set
			If ((Me._order_date = value)  _
						= false) Then
				Me.Onorder_dateChanging(value)
				Me.SendPropertyChanging
				Me._order_date = value
				Me.SendPropertyChanged("order_date")
				Me.Onorder_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subtotal", DbType:="Decimal(38,2)")>  _
	Public Property subtotal() As System.Nullable(Of Decimal)
		Get
			Return Me._subtotal
		End Get
		Set
			If (Me._subtotal.Equals(value) = false) Then
				Me.OnsubtotalChanging(value)
				Me.SendPropertyChanging
				Me._subtotal = value
				Me.SendPropertyChanged("subtotal")
				Me.OnsubtotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(3,0) NOT NULL")>  _
	Public Property discount() As Decimal
		Get
			Return Me._discount
		End Get
		Set
			If ((Me._discount = value)  _
						= false) Then
				Me.OndiscountChanging(value)
				Me.SendPropertyChanging
				Me._discount = value
				Me.SendPropertyChanged("discount")
				Me.OndiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="Decimal(38,2)")>  _
	Public Property total() As System.Nullable(Of Decimal)
		Get
			Return Me._total
		End Get
		Set
			If (Me._total.Equals(value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpandedOrders_Customer", Storage:="_Customers", ThisKey:="customer_id", OtherKey:="id")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpandedOrders_Order_Line", Storage:="_Order_Lines", ThisKey:="id", OtherKey:="order_id")>  _
	Public Property Order_Lines() As EntitySet(Of Order_Line)
		Get
			Return Me._Order_Lines
		End Get
		Set
			Me._Order_Lines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpandedOrders_Order", Storage:="_Orders", ThisKey:="id", OtherKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Orders() As [Order]
		Get
			Return Me._Orders.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Orders.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Orders.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Orders.Entity = Nothing
					previousValue.ExpandedOrders = Nothing
				End If
				Me._Orders.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ExpandedOrders = Me
				End If
				Me.SendPropertyChanged("Orders")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.ExpandedOrders = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.ExpandedOrders = Nothing
	End Sub
	
	Private Sub attach_Order_Lines(ByVal entity As Order_Line)
		Me.SendPropertyChanging
		entity.ExpandedOrders = Me
	End Sub
	
	Private Sub detach_Order_Lines(ByVal entity As Order_Line)
		Me.SendPropertyChanging
		entity.ExpandedOrders = Nothing
	End Sub
End Class
